<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments on: The Philosopher&#8217;s Song</title>
	<link>http://lesscode.org/2005/12/22/the-philosophers-song/</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 09:11:26 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>by: Path of the Digital Katana &#187; Be the Ronin with your languages</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-8639</link>
		<pubDate>Tue, 22 Aug 2006 02:36:05 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-8639</guid>
					<description>&lt;p&gt;[...] The lesscode blog isn&amp;#8217;t too active any more, but it has much sage advice, and a good post from last year that&amp;#8217;s been referred to many times. &amp;#8220;The Philosopher&amp;#8217;s Song&amp;#8221;  is a ranging muse on the efficacy of languages, and the rage of Ruby vs. Python and the sameness of now to history. [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] The lesscode blog isn&#8217;t too active any more, but it has much sage advice, and a good post from last year that&#8217;s been referred to many times. &#8220;The Philosopher&#8217;s Song&#8221;  is a ranging muse on the efficacy of languages, and the rage of Ruby vs. Python and the sameness of now to history. [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Roger Lancefield</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-6384</link>
		<pubDate>Mon, 31 Jul 2006 14:42:30 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-6384</guid>
					<description>&lt;p&gt;(A belated) thanks for a great 'lunch time' read Bill. Common-sense and a voice of reason never go out of style!&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>(A belated) thanks for a great &#8216;lunch time&#8217; read Bill. Common-sense and a voice of reason never go out of style!</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Christopher Dunn</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-1012</link>
		<pubDate>Sun, 29 Jan 2006 00:56:40 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-1012</guid>
					<description>&lt;p&gt;It is important to recognize the variety of use cases when discussing the appropriateness of a language. There are more than just &quot;enterprise systems programming&quot; and &quot;large-scale applications development&quot;. The best uses for dynamic languages are the most oft-neglected by serious programmers:&lt;/p&gt;

&lt;p&gt;1) Proto-typing
2) User-interfacing&lt;/p&gt;

&lt;p&gt;Proto-typing&lt;/p&gt;

&lt;p&gt;Ruby and Python are both wonderful for rapid proto-typing. Python may have an edge in library availability and in its similarity to C++/C# (if one of those happens to be the eventual target). For C#, maybe Boo is best. If only portions of the script will be translated into a statically-typed language, then Ruby stands out as it eschews reference-counting (though Boost-Python works well to hide the complexity).&lt;/p&gt;

&lt;p&gt;User-interfacing&lt;/p&gt;

&lt;p&gt;Tcl is the typical choice, a horrendous one because it so severely limits both productivity and maintainability. But Ruby, Perl, Scheme, and many others are much too difficult for a non-programmer. This is where Python shines. The things that hard-core programmers dislike about Python are precisely the things that make it so valuable for non-programmers. It's a language which encourages maintainable code no matter who writes it. Python makes important things like documentation, modularity, OOP, and testing so trivial that a part-time programmer &lt;em&gt;might&lt;/em&gt; be induced to try them.&lt;/p&gt;

&lt;p&gt;The blog author correctly points out in the footnote that where Ruby is most vociferously advocated, there are many reasonable alternatives, including Smalltalk, Common Lisp, Scheme, Ocaml/F#, Eiffel, Haskell, Dylan, etc. That completely misses the great value of dynamic languages: intuitiveness.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>It is important to recognize the variety of use cases when discussing the appropriateness of a language. There are more than just &#8220;enterprise systems programming&#8221; and &#8220;large-scale applications development&#8221;. The best uses for dynamic languages are the most oft-neglected by serious programmers:</p>
<p>1) Proto-typing<br />
2) User-interfacing</p>
<p>Proto-typing</p>
<p>Ruby and Python are both wonderful for rapid proto-typing. Python may have an edge in library availability and in its similarity to C++/C# (if one of those happens to be the eventual target). For C#, maybe Boo is best. If only portions of the script will be translated into a statically-typed language, then Ruby stands out as it eschews reference-counting (though Boost-Python works well to hide the complexity).</p>
<p>User-interfacing</p>
<p>Tcl is the typical choice, a horrendous one because it so severely limits both productivity and maintainability. But Ruby, Perl, Scheme, and many others are much too difficult for a non-programmer. This is where Python shines. The things that hard-core programmers dislike about Python are precisely the things that make it so valuable for non-programmers. It&#8217;s a language which encourages maintainable code no matter who writes it. Python makes important things like documentation, modularity, OOP, and testing so trivial that a part-time programmer <em>might</em> be induced to try them.</p>
<p>The blog author correctly points out in the footnote that where Ruby is most vociferously advocated, there are many reasonable alternatives, including Smalltalk, Common Lisp, Scheme, Ocaml/F#, Eiffel, Haskell, Dylan, etc. That completely misses the great value of dynamic languages: intuitiveness.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Robert Sayre</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-916</link>
		<pubDate>Tue, 03 Jan 2006 15:44:38 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-916</guid>
					<description>&lt;p&gt;Closures do matter and JavaScript wins :)&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Closures do matter and JavaScript wins :)</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: James Britt</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-847</link>
		<pubDate>Mon, 26 Dec 2005 04:53:40 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-847</guid>
					<description>&lt;p&gt;&quot;All other things being equal if closures count for that much, then s’talk and CLisp get to be at the races.&quot;&lt;/p&gt;

&lt;p&gt;Sort of.  All other things are not equal, though.  Syntax matters, as does a free, robust, cross-platform implementation with a decent set of equally robust, cross-platform libraries.   &lt;/p&gt;

&lt;p&gt;I'd &lt;em&gt;love&lt;/em&gt; to be able to develop Web apps on Windows and simply drop them into place on my Linux server, while sharing code with folks using Macs, and know that code revisions are safely tracked through SVN or darcs.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>&#8220;All other things being equal if closures count for that much, then s’talk and CLisp get to be at the races.&#8221;</p>
<p>Sort of.  All other things are not equal, though.  Syntax matters, as does a free, robust, cross-platform implementation with a decent set of equally robust, cross-platform libraries.   </p>
<p>I&#8217;d <em>love</em> to be able to develop Web apps on Windows and simply drop them into place on my Linux server, while sharing code with folks using Macs, and know that code revisions are safely tracked through SVN or darcs.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: James Britt</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-846</link>
		<pubDate>Mon, 26 Dec 2005 04:18:07 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-846</guid>
					<description>&lt;p&gt;&quot;Two minority language communities going at it over book sales, is mildly embarrassing ...&quot;&lt;/p&gt;

&lt;p&gt;PLEASE, I beg of you, please do not advance the idea that these dopey squabbles are occurring on behalf of the Ruby or Python communities.  Many Rubyists are quite embarrassed by these sorts of petty tirades.  The narrow-minded views of many Railers should not be conflated with any general opinions of Ruby hackers.  &lt;/p&gt;

&lt;p&gt;I suspect the same is true for most Pythonistas.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>&#8220;Two minority language communities going at it over book sales, is mildly embarrassing &#8230;&#8221;</p>
<p>PLEASE, I beg of you, please do not advance the idea that these dopey squabbles are occurring on behalf of the Ruby or Python communities.  Many Rubyists are quite embarrassed by these sorts of petty tirades.  The narrow-minded views of many Railers should not be conflated with any general opinions of Ruby hackers.  </p>
<p>I suspect the same is true for most Pythonistas.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Zilch Zero</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-845</link>
		<pubDate>Sun, 25 Dec 2005 21:14:30 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-845</guid>
					<description>&lt;p&gt;So why is it that &lt;del&gt;a loudmouthed boy from Denmark&lt;/del&gt;, who managed to come up with an ORM (you go, dude!), has the balls to deride Mr Eckel, who -- among other things -- sat on the C++ language committee for the better part of 8 years?&lt;/p&gt;

&lt;p&gt;Appears the hype Tim O'Reilly is bathing DHH in -- for his (O'Reilly's) benefit to be sure -- has finally gone to &lt;del&gt;the boy-wonders&lt;/del&gt; head beyond the point of annoyance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ed. -- Portions of this message have been marked flame-bait.&lt;/em&gt;&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>So why is it that <del>a loudmouthed boy from Denmark</del>, who managed to come up with an ORM (you go, dude!), has the balls to deride Mr Eckel, who &#8212; among other things &#8212; sat on the C++ language committee for the better part of 8 years?</p>
<p>Appears the hype Tim O&#8217;Reilly is bathing DHH in &#8212; for his (O&#8217;Reilly&#8217;s) benefit to be sure &#8212; has finally gone to <del>the boy-wonders</del> head beyond the point of annoyance.</p>
<p><em>Ed. &#8212; Portions of this message have been marked flame-bait.</em></p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Bill de hOra</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-838</link>
		<pubDate>Fri, 23 Dec 2005 16:36:32 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-838</guid>
					<description>&lt;p&gt;&quot;You almost made it!&quot;&lt;/p&gt;

&lt;p&gt;LOL! You got me. But there is valid point here - closures seem to be a common technical argument pro Ruby compared to Python/Java/C#. All other things being equal if closures count for that much, then s'talk and CLisp get to be at the races.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>&#8220;You almost made it!&#8221;</p>
<p>LOL! You got me. But there is valid point here - closures seem to be a common technical argument pro Ruby compared to Python/Java/C#. All other things being equal if closures count for that much, then s&#8217;talk and CLisp get to be at the races.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Anonymous</title>
		<link>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-836</link>
		<pubDate>Fri, 23 Dec 2005 03:36:00 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/22/the-philosophers-song/#comment-836</guid>
					<description>&lt;p&gt;&quot;* Anyone that really feels Ruby closures are a critical technical factor should be wondering why they’re not develping in Smalltalk or CLisp.&quot;&lt;/p&gt;

&lt;p&gt;You almost made it!  You were arguing against language quibbles, and it was good, and then you had to resort to the very thing you were arguing against in a footnote.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>&#8220;* Anyone that really feels Ruby closures are a critical technical factor should be wondering why they’re not develping in Smalltalk or CLisp.&#8221;</p>
<p>You almost made it!  You were arguing against language quibbles, and it was good, and then you had to resort to the very thing you were arguing against in a footnote.</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.333 seconds -->
<!-- Cached page served by WP-Cache -->
