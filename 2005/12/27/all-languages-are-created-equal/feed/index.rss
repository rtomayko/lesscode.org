<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments on: All Languages Are Created Equal?</title>
	<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 09:11:25 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>by: benoitstpierre</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-975</link>
		<pubDate>Thu, 19 Jan 2006 17:54:34 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-975</guid>
					<description>&lt;p&gt;Category theory is quite abstract and can be faithfully expressed visually.  This is an old myth : syntactic tools are not (that much) more expressive than graphical ones.  Humans tend to like the use of both : one has just to open an illustrated dictionnary to remember it.  A diagram is not just visual, anywho. Maybe the author wish to say that real hackers are gifted in abstraction, so do not need to visualize.  &lt;/p&gt;

&lt;p&gt;A Real Programmer would say that GUI is not even useful.  Since a Real Programmer would never consider writing in Pascal, why would care for Less Code ? Maybe the author wished to say that an agile thinker would never try to model before trying to code directly, maybe even litterally.&lt;/p&gt;

&lt;p&gt;Less coding requires the acceptance of our limited rationality.  Bureaucrats try to rationalize their way down.  They tend to forget we are not well equiped to work that way.  Besides, this is just to risky : I would not invest a minute in a project that could lead to nowhere ?&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Category theory is quite abstract and can be faithfully expressed visually.  This is an old myth : syntactic tools are not (that much) more expressive than graphical ones.  Humans tend to like the use of both : one has just to open an illustrated dictionnary to remember it.  A diagram is not just visual, anywho. Maybe the author wish to say that real hackers are gifted in abstraction, so do not need to visualize.  </p>
<p>A Real Programmer would say that GUI is not even useful.  Since a Real Programmer would never consider writing in Pascal, why would care for Less Code ? Maybe the author wished to say that an agile thinker would never try to model before trying to code directly, maybe even litterally.</p>
<p>Less coding requires the acceptance of our limited rationality.  Bureaucrats try to rationalize their way down.  They tend to forget we are not well equiped to work that way.  Besides, this is just to risky : I would not invest a minute in a project that could lead to nowhere ?</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Alex Bunardzic</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-864</link>
		<pubDate>Wed, 28 Dec 2005 21:13:44 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-864</guid>
					<description>&lt;p&gt;Greg wrote:&lt;/p&gt;

&lt;blockquote&gt;And please stop using the “i” word. Microsoft has killed it for everyone.&lt;/blockquote&gt;

&lt;p&gt;No one can kill it for me. And if we now stop using the &quot;i&quot; word, then clearly the terrorists have won.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Greg wrote:</p>
<blockquote><p>And please stop using the “i” word. Microsoft has killed it for everyone.</p></blockquote>
<p>No one can kill it for me. And if we now stop using the &#8220;i&#8221; word, then clearly the terrorists have won.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Greg</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-863</link>
		<pubDate>Wed, 28 Dec 2005 19:35:51 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-863</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;For example, DHH came up with an innovative solution (Ruby on Rails) in a very unpredictable manner — he first developed Basecamp, and then went back and extracted Ruby on Rails from it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Huh?  The history of programming language design is ripe with examples like this.  Stroustroup developed C++ because he was trying to write simulation code in C, and didn't have Simula.  Then he created cfront as a standalone entity.  The Java folks developed it because they wanted to code for mobile devices, and C++ wasn't cutting it.  Later, they realized the language had more value than their gizmo.  Larry Wall developed perl after building a version management system based on usenet news with it.&lt;/p&gt;

&lt;p&gt;And please stop using the &quot;i&quot; word.  Microsoft has killed it for everyone.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>For example, DHH came up with an innovative solution (Ruby on Rails) in a very unpredictable manner — he first developed Basecamp, and then went back and extracted Ruby on Rails from it. </p>
</blockquote>
<p>Huh?  The history of programming language design is ripe with examples like this.  Stroustroup developed C++ because he was trying to write simulation code in C, and didn&#8217;t have Simula.  Then he created cfront as a standalone entity.  The Java folks developed it because they wanted to code for mobile devices, and C++ wasn&#8217;t cutting it.  Later, they realized the language had more value than their gizmo.  Larry Wall developed perl after building a version management system based on usenet news with it.</p>
<p>And please stop using the &#8220;i&#8221; word.  Microsoft has killed it for everyone.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Aristotle Pagaltzis</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-862</link>
		<pubDate>Wed, 28 Dec 2005 16:13:39 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-862</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;But hackers ethics is that predictability is not desirable. Instead, they favor unpredictability, which is just another word for creativity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hogwash.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>But hackers ethics is that predictability is not desirable. Instead, they favor unpredictability, which is just another word for creativity.</p>
</blockquote>
<p>Hogwash.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Chiaroscuro</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-861</link>
		<pubDate>Wed, 28 Dec 2005 12:08:00 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-861</guid>
					<description>&lt;p&gt;Alex, now you are talking about products and not languages.  &lt;/p&gt;

&lt;p&gt;In most cases products don't need to be readable and I can more easily accept (and sometimes actively welcome) standardisation in this case.  When we are talking about languages it's a whole different issue.  &lt;/p&gt;

&lt;p&gt;You use languages to provide for new business requirements within a company.  In this case the faster you do it without losing face due to stupid errors, the better it is.  If the problem is new and not trivial faster usually means star developers with dynamic languages and test-first design.  That's the way I have seen it done in the finance and telco industry.&lt;/p&gt;

&lt;p&gt;In the end, as you say, the only way to guarantee stability is to innovate continuously.  A business that doesn't change (that cannot change!) quickly is also a dead business.  &lt;/p&gt;

&lt;p&gt;In the Red Queen Country &quot;it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!&quot; :-)&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Alex, now you are talking about products and not languages.  </p>
<p>In most cases products don&#8217;t need to be readable and I can more easily accept (and sometimes actively welcome) standardisation in this case.  When we are talking about languages it&#8217;s a whole different issue.  </p>
<p>You use languages to provide for new business requirements within a company.  In this case the faster you do it without losing face due to stupid errors, the better it is.  If the problem is new and not trivial faster usually means star developers with dynamic languages and test-first design.  That&#8217;s the way I have seen it done in the finance and telco industry.</p>
<p>In the end, as you say, the only way to guarantee stability is to innovate continuously.  A business that doesn&#8217;t change (that cannot change!) quickly is also a dead business.  </p>
<p>In the Red Queen Country &#8220;it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!&#8221; :-)</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Alex Bunardzic</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-859</link>
		<pubDate>Wed, 28 Dec 2005 02:08:20 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-859</guid>
					<description>&lt;p&gt;Greg wrote:&lt;/p&gt;

&lt;blockquote&gt;However, all the languages mentioned above are so fundamentally similar to each other, that it is just silly to be arguing their relative merits. The fact that hackers get into these endless languages wars though is a result of deeper, more fundamental issues.&lt;/blockquote&gt;

&lt;p&gt;Yes. These issues are as follows: there are programming languages that are tailored toward producing &lt;em&gt;repeatable&lt;/em&gt; results. And then there are programming languages that are more tailored toward producing novel results. In other words, some languages change the ways we think about the problem domains.&lt;/p&gt;

&lt;p&gt;The language wars you speak of are merely symptoms of the much deeper repeatable/unpredictable war going on. Some people feel uncomfortable if the solution offered to them is not necessarily easily repeatable.&lt;/p&gt;

&lt;p&gt;For example, DHH came up with an innovative solution (Ruby on Rails) in a very unpredictable manner -- he first developed Basecamp, and then went back and extracted Ruby on Rails from it. What made that bravado possible is Ruby (he wouldn't have been able to accomplish that using PHP or Java, and not for the lack of trying).&lt;/p&gt;

&lt;p&gt;How repeatable is that process? Can David now predict with any degree of certainty that the next product he develops will be again used for extracting a brand new and a very innovative framework?&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Greg wrote:</p>
<blockquote><p>However, all the languages mentioned above are so fundamentally similar to each other, that it is just silly to be arguing their relative merits. The fact that hackers get into these endless languages wars though is a result of deeper, more fundamental issues.</p></blockquote>
<p>Yes. These issues are as follows: there are programming languages that are tailored toward producing <em>repeatable</em> results. And then there are programming languages that are more tailored toward producing novel results. In other words, some languages change the ways we think about the problem domains.</p>
<p>The language wars you speak of are merely symptoms of the much deeper repeatable/unpredictable war going on. Some people feel uncomfortable if the solution offered to them is not necessarily easily repeatable.</p>
<p>For example, DHH came up with an innovative solution (Ruby on Rails) in a very unpredictable manner &#8212; he first developed Basecamp, and then went back and extracted Ruby on Rails from it. What made that bravado possible is Ruby (he wouldn&#8217;t have been able to accomplish that using PHP or Java, and not for the lack of trying).</p>
<p>How repeatable is that process? Can David now predict with any degree of certainty that the next product he develops will be again used for extracting a brand new and a very innovative framework?</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Greg</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-858</link>
		<pubDate>Wed, 28 Dec 2005 01:54:43 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-858</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;While I absolutely agree with you, I don’t think this is really an issue. To me (being a musician), it’s the same as saying that each and every music notation known to man, sucks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm glad you made the music reference.  First, I think that music notation sucks much less compared to programming languages.  For one thing, the music folks have had several thousands years to work on their notations.  For another thing, music notation has a rich typography that transcends the linear ASCII notation of all serious programming languages.  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wouldn’t hold my breath waiting for some future programming language that will read like a natural language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just to be clear, I'm not advocating programming in a natual language.  However, all the languages mentioned above are so fundamentally similar to each other, that it is just silly to be arguing their relative merits.  The fact that hackers get into these endless languages wars though is a result of deeper, more fundamental issues.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>While I absolutely agree with you, I don’t think this is really an issue. To me (being a musician), it’s the same as saying that each and every music notation known to man, sucks.</p>
</blockquote>
<p>I&#8217;m glad you made the music reference.  First, I think that music notation sucks much less compared to programming languages.  For one thing, the music folks have had several thousands years to work on their notations.  For another thing, music notation has a rich typography that transcends the linear ASCII notation of all serious programming languages.  </p>
<blockquote>
<p>I wouldn’t hold my breath waiting for some future programming language that will read like a natural language.</p>
</blockquote>
<p>Just to be clear, I&#8217;m not advocating programming in a natual language.  However, all the languages mentioned above are so fundamentally similar to each other, that it is just silly to be arguing their relative merits.  The fact that hackers get into these endless languages wars though is a result of deeper, more fundamental issues.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Alex Bunardzic</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-857</link>
		<pubDate>Tue, 27 Dec 2005 23:28:59 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-857</guid>
					<description>&lt;p&gt;Chiaroscuro wrote:&lt;/p&gt;

&lt;blockquote&gt;Readability is also an issue of control. Can you control (read, change) the code that you have got? Bureaucrats look for ‘control’ by settling on some standards, hackers are always striving for better forms of ‘control’ often leaving behind them a trail of different ’styles’ and approaches to code. This is certainly good for personal development, but I still have to decide if it is a good thing from the point of view of a company.&lt;/blockquote&gt;

&lt;p&gt;All the bureaucrats I know seem to not feel this is an issue at all. For example, all the bureaucrats love using products such as Microsoft Office, SAP, PeopleSoft, etc. How readable are those products? They are 100% opaque, since they are protected, under the death penalty threat, by the law. No one in the world is supposed to read them. We're all supposed to take them at a face value and cherish them.&lt;/p&gt;

&lt;blockquote&gt;How would you guys decide for the right trade-off between continuous innovation and stability in a project?&lt;/blockquote&gt;

&lt;p&gt;In my company, continuous innovation is the only guarantee of the stability in a project.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Chiaroscuro wrote:</p>
<blockquote><p>Readability is also an issue of control. Can you control (read, change) the code that you have got? Bureaucrats look for ‘control’ by settling on some standards, hackers are always striving for better forms of ‘control’ often leaving behind them a trail of different ’styles’ and approaches to code. This is certainly good for personal development, but I still have to decide if it is a good thing from the point of view of a company.</p></blockquote>
<p>All the bureaucrats I know seem to not feel this is an issue at all. For example, all the bureaucrats love using products such as Microsoft Office, SAP, PeopleSoft, etc. How readable are those products? They are 100% opaque, since they are protected, under the death penalty threat, by the law. No one in the world is supposed to read them. We&#8217;re all supposed to take them at a face value and cherish them.</p>
<blockquote><p>How would you guys decide for the right trade-off between continuous innovation and stability in a project?</p></blockquote>
<p>In my company, continuous innovation is the only guarantee of the stability in a project.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Alex Bunardzic</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-856</link>
		<pubDate>Tue, 27 Dec 2005 23:23:23 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-856</guid>
					<description>&lt;p&gt;Greg wrote:&lt;/p&gt;

&lt;blockquote&gt;Deep down, both hackers and “bureaucrats” really know the truth, but are afraid to admit it — that all programming languages stink. Take this challenge: find a paragraph of your code, in any language, that you are really proud of, as a hacker. Show this code to someone who has never seen it before, and time how long it takes for that hacker to really grock it, to the extent that the code can be modified in some way. When we have programming languages that can be read and grokked as fast as natural languages, then we will have progress.&lt;/blockquote&gt;

&lt;p&gt;While I absolutely agree with you, I don't think this is really an issue. To me (being a musician), it's the same as saying that each and every music notation known to man, sucks. Yes, it's true, there is no perfect music notation (each notation system manages to miss incredibly huge vital portion of the music); still, we have no other recourse but learn to use the music notation of our choice.&lt;/p&gt;

&lt;p&gt;Same is with programming languages -- they are an approximation of the way we think in abstract terms. Far from being perfect, but we have no choice but use them.&lt;/p&gt;

&lt;p&gt;I wouldn't hold my breath waiting for some future programming language that will read like a natural language.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Greg wrote:</p>
<blockquote><p>Deep down, both hackers and “bureaucrats” really know the truth, but are afraid to admit it — that all programming languages stink. Take this challenge: find a paragraph of your code, in any language, that you are really proud of, as a hacker. Show this code to someone who has never seen it before, and time how long it takes for that hacker to really grock it, to the extent that the code can be modified in some way. When we have programming languages that can be read and grokked as fast as natural languages, then we will have progress.</p></blockquote>
<p>While I absolutely agree with you, I don&#8217;t think this is really an issue. To me (being a musician), it&#8217;s the same as saying that each and every music notation known to man, sucks. Yes, it&#8217;s true, there is no perfect music notation (each notation system manages to miss incredibly huge vital portion of the music); still, we have no other recourse but learn to use the music notation of our choice.</p>
<p>Same is with programming languages &#8212; they are an approximation of the way we think in abstract terms. Far from being perfect, but we have no choice but use them.</p>
<p>I wouldn&#8217;t hold my breath waiting for some future programming language that will read like a natural language.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: beza1e1</title>
		<link>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-855</link>
		<pubDate>Tue, 27 Dec 2005 21:56:28 +0000</pubDate>
		<guid>http://lesscode.org/2005/12/27/all-languages-are-created-equal/#comment-855</guid>
					<description>&lt;p&gt;In Leadership courses i heared of three phases for projects and there are different types of leaders needed. Perhaps this applies for languages as well. Then the solution would be different languages, which can be compiled to one another.&lt;/p&gt;

&lt;p&gt;The leader types would be: Innovator/Loonatic, Negotiator/Perfectionist, Preserver/Ultraconservative&lt;/p&gt;

&lt;p&gt;In Programming Languages: Ruby/Python, Lisp/C, C++/Java&lt;/p&gt;

&lt;p&gt;While Upper Management is mostly busy in stage three(Big Corporations), Hackers (especially in Grahams sense) are in stage one (Startups). Probably M Lauer is in between - stage two: Use the best tools for the job.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>In Leadership courses i heared of three phases for projects and there are different types of leaders needed. Perhaps this applies for languages as well. Then the solution would be different languages, which can be compiled to one another.</p>
<p>The leader types would be: Innovator/Loonatic, Negotiator/Perfectionist, Preserver/Ultraconservative</p>
<p>In Programming Languages: Ruby/Python, Lisp/C, C++/Java</p>
<p>While Upper Management is mostly busy in stage three(Big Corporations), Hackers (especially in Grahams sense) are in stage one (Startups). Probably M Lauer is in between - stage two: Use the best tools for the job.</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.364 seconds -->
<!-- Cached page served by WP-Cache -->
