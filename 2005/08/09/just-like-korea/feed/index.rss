<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments on: &#8220;Enterprise Software&#8221; is a social phenomenon</title>
	<link>http://lesscode.org/2005/08/09/just-like-korea/</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 05:32:31 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>by: james governor</title>
		<link>http://lesscode.org/2005/08/09/just-like-korea/#comment-200</link>
		<pubDate>Fri, 12 Aug 2005 12:16:32 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/09/just-like-korea/#comment-200</guid>
					<description>&lt;p&gt;&quot;We don’t have 10 different word processors for different industries&quot;&lt;/p&gt;

&lt;p&gt;take a closer look at IBM's Workplace strategy...&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>&#8220;We don’t have 10 different word processors for different industries&#8221;</p>
<p>take a closer look at IBM&#8217;s Workplace strategy&#8230;</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Ryan Tomayko</title>
		<link>http://lesscode.org/2005/08/09/just-like-korea/#comment-189</link>
		<pubDate>Tue, 09 Aug 2005 18:04:25 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/09/just-like-korea/#comment-189</guid>
					<description>&lt;p&gt;Peter: thanks for stopping by. Your insight here is definitely valuable :)&lt;/p&gt;

&lt;p&gt;Enterprise vs. General Purpose is an interesting way to look at the landscape. I was speaking more from the angle of tools and languages that are generally accepted in the Enterprise (as in Oracle, J2EE, sometimes Microsoft products, etc.) versus their rough analogs in the commodity stack (Apache, Python, PHP, PostgreSQL, etc). The latter do not yet enjoy the same social acceptance, although technically we're finding that they can get the job done and are often times demonstrably superior in many ways (as I'm absolutely positive you understand better than most :)&lt;/p&gt;

&lt;p&gt;Of course, Curt's argument takes a bit of steam out of the theory being universally applicable but I still think it holds in many cases.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Peter: thanks for stopping by. Your insight here is definitely valuable :)</p>
<p>Enterprise vs. General Purpose is an interesting way to look at the landscape. I was speaking more from the angle of tools and languages that are generally accepted in the Enterprise (as in Oracle, J2EE, sometimes Microsoft products, etc.) versus their rough analogs in the commodity stack (Apache, Python, PHP, PostgreSQL, etc). The latter do not yet enjoy the same social acceptance, although technically we&#8217;re finding that they can get the job done and are often times demonstrably superior in many ways (as I&#8217;m absolutely positive you understand better than most :)</p>
<p>Of course, Curt&#8217;s argument takes a bit of steam out of the theory being universally applicable but I still think it holds in many cases.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Peter Yared</title>
		<link>http://lesscode.org/2005/08/09/just-like-korea/#comment-188</link>
		<pubDate>Tue, 09 Aug 2005 15:54:05 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/09/just-like-korea/#comment-188</guid>
					<description>&lt;p&gt;I think that the distinction is that enterprise software is made specific to a certain set of needs, and general purpose software is made to suit a variety of needs.  So while adding a certain set of features could make a piece of code more technically complete, with enterprise software you generally only add the subset of features that somewhere between 75-95% of companies in your target market would need.  So on one hand you get software that is percieved to be inferior, but on the other hand enterprise software is created by businesses that need to make a profit and are focused on particular customer segments.&lt;/p&gt;

&lt;p&gt;But in the long run everything becomes general purpose.  We don't have 10 different word processors for different industries.  As general purpose software becomes commoditized under flexible open source licenses, I think we will see more and more if it incorporated into enterprise software that it targeted at particular corporate uses.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I think that the distinction is that enterprise software is made specific to a certain set of needs, and general purpose software is made to suit a variety of needs.  So while adding a certain set of features could make a piece of code more technically complete, with enterprise software you generally only add the subset of features that somewhere between 75-95% of companies in your target market would need.  So on one hand you get software that is percieved to be inferior, but on the other hand enterprise software is created by businesses that need to make a profit and are focused on particular customer segments.</p>
<p>But in the long run everything becomes general purpose.  We don&#8217;t have 10 different word processors for different industries.  As general purpose software becomes commoditized under flexible open source licenses, I think we will see more and more if it incorporated into enterprise software that it targeted at particular corporate uses.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Curt  Sampson</title>
		<link>http://lesscode.org/2005/08/09/just-like-korea/#comment-186</link>
		<pubDate>Tue, 09 Aug 2005 10:55:58 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/09/just-like-korea/#comment-186</guid>
					<description>&lt;p&gt;I don't think I'm buying this one. There's a a much simpler definition that works for me: &quot;Enterprise Software&quot; is the software you use to model your business, or a non-trivial part of your business.&lt;/p&gt;

&lt;p&gt;There's nothing to get excited about as far as LAMP in the enterprise goes: open source stuff has been used there for ages. Apache is widespread in large businesses now, and Perl and TCL have been widespread for well over a decade now. Back in '95 Fortune 500 companies were buying UNameIt, largely written in TCL, from Enterprise Systems and using it to manage hundreds of networks, thousands of servers, and tens of thousands of workstations worldwide.&lt;/p&gt;

&lt;p&gt;If you're wondering why some stuff doesn't cut it in &quot;Enterprise&quot; applications, it's probably because it's just not good enough. MySQL is a great example; it's fine as a trivial storage system used by one small application, but it's always suffered from a lack of features and extremely poor data integrity management. It's going to cause you pain beyond belief if you try to use it for databases used by dozens or hundreds of applications across an enterprise. On the other hand, PostgreSQL has done a pretty good job over the last six or seven years of implementing what's needed, and is now competitive with Oracle and so on. (I've sold several conversions from Oracle to PostgreSQL for company-wide databases.)&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I don&#8217;t think I&#8217;m buying this one. There&#8217;s a a much simpler definition that works for me: &#8220;Enterprise Software&#8221; is the software you use to model your business, or a non-trivial part of your business.</p>
<p>There&#8217;s nothing to get excited about as far as LAMP in the enterprise goes: open source stuff has been used there for ages. Apache is widespread in large businesses now, and Perl and TCL have been widespread for well over a decade now. Back in &#8216;95 Fortune 500 companies were buying UNameIt, largely written in TCL, from Enterprise Systems and using it to manage hundreds of networks, thousands of servers, and tens of thousands of workstations worldwide.</p>
<p>If you&#8217;re wondering why some stuff doesn&#8217;t cut it in &#8220;Enterprise&#8221; applications, it&#8217;s probably because it&#8217;s just not good enough. MySQL is a great example; it&#8217;s fine as a trivial storage system used by one small application, but it&#8217;s always suffered from a lack of features and extremely poor data integrity management. It&#8217;s going to cause you pain beyond belief if you try to use it for databases used by dozens or hundreds of applications across an enterprise. On the other hand, PostgreSQL has done a pretty good job over the last six or seven years of implementing what&#8217;s needed, and is now competitive with Oracle and so on. (I&#8217;ve sold several conversions from Oracle to PostgreSQL for company-wide databases.)</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.292 seconds -->
<!-- Cached page served by WP-Cache -->
