<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments on: Control-Space</title>
	<link>http://lesscode.org/2005/08/29/control-space/</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 09:11:48 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>by: Anonymous</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-50839</link>
		<pubDate>Wed, 04 Jul 2007 03:39:38 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-50839</guid>
					<description>&lt;p&gt;I think there is no issue with option of using ctrl space in fact it reduces lot of coding time by thinking or refering the docs.If you feel like you are unable to remember the code because of this , you have to find other way of remembering it.&lt;/p&gt;

&lt;p&gt;“ITS LIKE BLAMING THE VEHICLE FOR YOU ARE NOT READY TO WALK TO REACH THERE”&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I think there is no issue with option of using ctrl space in fact it reduces lot of coding time by thinking or refering the docs.If you feel like you are unable to remember the code because of this , you have to find other way of remembering it.</p>
<p>“ITS LIKE BLAMING THE VEHICLE FOR YOU ARE NOT READY TO WALK TO REACH THERE”</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Another high-profile developer warms up to Ruby &#171; Curt&#8217;s Comments</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-14749</link>
		<pubDate>Mon, 09 Oct 2006 02:10:48 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-14749</guid>
					<description>&lt;p&gt;[...] (via lesscode.org) [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] (via lesscode.org) [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Patrick Logan</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-1409</link>
		<pubDate>Thu, 30 Mar 2006 19:45:59 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-1409</guid>
					<description>&lt;p&gt;Control-space? What the heck is wrong with the &lt;code&gt;set-mark-command&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;;^/&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Control-space? What the heck is wrong with the <code>set-mark-command</code>?</p>
<p>;^/</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Memo</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-1408</link>
		<pubDate>Thu, 30 Mar 2006 17:39:09 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-1408</guid>
					<description>&lt;p&gt;I think that the guys who thinks that CTRL+SPACE is stupid ARE STUPIDS....
if by using the CTRL+SPACE you forget the code you are the stupid, this is a tool microsoft gave us to facilitate our work... theres nothing bad in using it and i think you just posted it that comment so peopple see you are &quot;THE BEST&quot; for not using it (note the quotation marks)&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I think that the guys who thinks that CTRL+SPACE is stupid ARE STUPIDS&#8230;.<br />
if by using the CTRL+SPACE you forget the code you are the stupid, this is a tool microsoft gave us to facilitate our work&#8230; theres nothing bad in using it and i think you just posted it that comment so peopple see you are &#8220;THE BEST&#8221; for not using it (note the quotation marks)</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Damian Cugley</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-383</link>
		<pubDate>Wed, 07 Sep 2005 15:34:21 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-383</guid>
					<description>&lt;p&gt;Autocompletion of method names does not save me from having to type &lt;code&gt;public override void&lt;/code&gt; over and over again (Visual Studio .Net does not autocomplete language keywords).  Microsoft Visual Basic.NET was worse than C#; not only does your override of some property start with &lt;code&gt;Public ReadOnly Property&lt;/code&gt; (three words that for some reason I can never type correctly first time), it then has to be followed with &lt;code&gt;Implements&lt;/code&gt;.  Consider that the Python equivalent of that sequence of words  is the three characters &lt;code&gt;def&lt;/code&gt;, and you can see that there is still a lot of extra keyboarding to do.&lt;/p&gt;

&lt;p&gt;As a more extreme example, consider the Python fragment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cats = []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The C# equivalent might require the creation of a whole extra class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CatalogueCollection : CollectionBase {
   .... dozens of lines of code omitted ...
}
...
CatalogueCollection cats = new CatalogueCollection();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This represents a several-hundered-to-one code-expansion ratio.  (Admittedly I now generate these subclasses of &lt;code&gt;CollectionBase&lt;/code&gt; et al. using &lt;a href=&quot;http://www.nedbatchelder.com/code/cog/index.html&quot; rel=&quot;nofollow&quot;&gt;Cog&lt;/a&gt;, which reduces the amount of actual typing required.)&lt;/p&gt;

&lt;p&gt;Lack of static declarations does not mean that autocompletion is impossible to implement--there are plenty of counterexamples.  But with less-verbose languages you need it a lot less.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Autocompletion of method names does not save me from having to type <code>public override void</code> over and over again (Visual Studio .Net does not autocomplete language keywords).  Microsoft Visual Basic.NET was worse than C#; not only does your override of some property start with <code>Public ReadOnly Property</code> (three words that for some reason I can never type correctly first time), it then has to be followed with <code>Implements</code>.  Consider that the Python equivalent of that sequence of words  is the three characters <code>def</code>, and you can see that there is still a lot of extra keyboarding to do.</p>
<p>As a more extreme example, consider the Python fragment</p>
<pre><code>cats = []
</code></pre>
<p>The C# equivalent might require the creation of a whole extra class:</p>
<pre><code>class CatalogueCollection : CollectionBase {
   .... dozens of lines of code omitted ...
}
...
CatalogueCollection cats = new CatalogueCollection();
</code></pre>
<p>This represents a several-hundered-to-one code-expansion ratio.  (Admittedly I now generate these subclasses of <code>CollectionBase</code> et al. using <a href="http://www.nedbatchelder.com/code/cog/index.html">Cog</a>, which reduces the amount of actual typing required.)</p>
<p>Lack of static declarations does not mean that autocompletion is impossible to implement&#8211;there are plenty of counterexamples.  But with less-verbose languages you need it a lot less.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Sharon Rosner</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-366</link>
		<pubDate>Wed, 31 Aug 2005 15:02:41 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-366</guid>
					<description>&lt;p&gt;Granted. Point retracted. I still do think it does more bad than good. Whatever.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Granted. Point retracted. I still do think it does more bad than good. Whatever.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Robert Sayre</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-365</link>
		<pubDate>Wed, 31 Aug 2005 13:18:20 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-365</guid>
					<description>&lt;p&gt;Sharon, I don't think Paul Graham's article speaks to your point. Most 'Experienced Lisp Programmers' use an editor with symobl completion, like Emacs/SLIME or Hemlock.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Sharon, I don&#8217;t think Paul Graham&#8217;s article speaks to your point. Most &#8216;Experienced Lisp Programmers&#8217; use an editor with symobl completion, like Emacs/SLIME or Hemlock.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Sharon Rosner</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-364</link>
		<pubDate>Wed, 31 Aug 2005 10:16:12 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-364</guid>
					<description>&lt;blockquote&gt;I have a hard time arguing against the value of Control+Space (I’ve tried before and was called on it, by Mr. de hOra no less). Control+Space is a rock solid feature that a great number of developers depend on.&lt;/blockquote&gt;

&lt;p&gt;
Ryan, I'm sure you've read Paul Graham's &lt;a href=&quot;http://www.paulgraham.com/progbot.html&quot; rel=&quot;nofollow&quot;&gt;Programming Bottom-Up&lt;/a&gt;. I needn't mention this approach is also at the basis of Ruby and Ruby on Rails. Ctrl+Space IS probably something many programmers depend on, but it has a lot of negative effects: it encourages illiteracy, discourages code reuse, makes the programmer dependent on a IDE and generally gives people bad habits.
&lt;/p&gt;

&lt;p&gt;
Look at .NET for instance. Microsoft has always had a pattern with developing API's: extensive coverage and flat API, preventing people from creating their own toolset and making it impossible to memorize the API. I've no experience with Java, but I guess it looks similar. From a business standpoint it makes perfect sense if you're Sun or Microsoft, but you know, some programmers regard themselves as artists...&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote><p>I have a hard time arguing against the value of Control+Space (I’ve tried before and was called on it, by Mr. de hOra no less). Control+Space is a rock solid feature that a great number of developers depend on.</p></blockquote>
<p>
Ryan, I&#8217;m sure you&#8217;ve read Paul Graham&#8217;s <a href="http://www.paulgraham.com/progbot.html">Programming Bottom-Up</a>. I needn&#8217;t mention this approach is also at the basis of Ruby and Ruby on Rails. Ctrl+Space IS probably something many programmers depend on, but it has a lot of negative effects: it encourages illiteracy, discourages code reuse, makes the programmer dependent on a IDE and generally gives people bad habits.
</p>
<p>
Look at .NET for instance. Microsoft has always had a pattern with developing API&#8217;s: extensive coverage and flat API, preventing people from creating their own toolset and making it impossible to memorize the API. I&#8217;ve no experience with Java, but I guess it looks similar. From a business standpoint it makes perfect sense if you&#8217;re Sun or Microsoft, but you know, some programmers regard themselves as artists&#8230;</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Anon E. Mouse</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-361</link>
		<pubDate>Wed, 31 Aug 2005 04:21:36 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-361</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;Yes you might get the code written just as fast. And in truth you can really bomb through Java code in a tool like IDEA. But after you ship, you will have more code to deal with, you will have more tools in the chain, you will have more technology to deal with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are you talking about standalone client apps?  Tim mentions that the two pieces of writing that made him look at Ruby/Rails were both dealing with web applications.  Since they're web apps, you're not releasing code into the wild.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>Yes you might get the code written just as fast. And in truth you can really bomb through Java code in a tool like IDEA. But after you ship, you will have more code to deal with, you will have more tools in the chain, you will have more technology to deal with.</p>
</blockquote>
<p>Are you talking about standalone client apps?  Tim mentions that the two pieces of writing that made him look at Ruby/Rails were both dealing with web applications.  Since they&#8217;re web apps, you&#8217;re not releasing code into the wild.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Aristotle Pagaltzis</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-358</link>
		<pubDate>Wed, 31 Aug 2005 03:53:44 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-358</guid>
					<description>&lt;p&gt;&lt;a href=&quot;#comment-356&quot;&gt;Robert&lt;/a&gt;: I thought the same thing. I occasionally dabble with GUI apps written in C and gtk+, where passing function pointers around is par of the course, and it's amazing how much easier it is to do the same things in Gtk2-Perl with the aid of closures. Being able to scope variables tightly &lt;em&gt;and&lt;/em&gt; reuse code &lt;strong&gt;without&lt;/strong&gt; the need to write elaborate code for passing around data structures is unimaginably liberating.&lt;/p&gt;

&lt;p&gt;Closures are so insanely useful, I don't understand how anyone would want to do without them once they've tasted the power. Closures are the real line I draw between languages I enjoy using and those I don't -- the static vs dynamic typing thing really takes a backseat.&lt;/p&gt;

&lt;p&gt;Which brings me to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#comment-352&quot;&gt;Ryan&lt;/a&gt;: WRT compiler errors, I am in fact very curious about getting my feet wet with the modern purely functional languages, such as Haskell, which are in fact &lt;em&gt;strongly&lt;/em&gt; typed. You just aren't reminded of it every step of the way. And the compiler can &lt;a href=&quot;http://perl.plover.com/yak/typing/samples/slide027.html&quot; rel=&quot;nofollow&quot;&gt;find real &lt;em&gt;logic&lt;/em&gt; bugs&lt;/a&gt; (&lt;a href=&quot;http://perl.plover.com/yak/typing/&quot; rel=&quot;nofollow&quot;&gt;read the talk notes&lt;/a&gt; to understand).&lt;/p&gt;

&lt;p&gt;That's in sharp contrast with the typing in ALGOL derivatives, which seems to constantly annoy withtout ever really repaying all the labour.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;(Note to self: I've been dropping the &quot;I'm curious&quot; line without doing anything about it for way too long now.)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I suppose both my lovesong for closures as well as my type inference tendencies put me firmly on one particular side of the &lt;a href=&quot;http://osteele.com/archives/2004/11/ides&quot;&gt;IDE divide&lt;/a&gt;... see also &lt;a href=&quot;http://lambda-the-ultimate.org/node/view/395&quot;&gt;the L-t-U discussion about it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In retrospect, I have to wonder how this discussion went for so long before I remembered that link. It seems to summarise most of what the language debate comes down to.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p><a href="#comment-356">Robert</a>: I thought the same thing. I occasionally dabble with GUI apps written in C and gtk+, where passing function pointers around is par of the course, and it&#8217;s amazing how much easier it is to do the same things in Gtk2-Perl with the aid of closures. Being able to scope variables tightly <em>and</em> reuse code <strong>without</strong> the need to write elaborate code for passing around data structures is unimaginably liberating.</p>
<p>Closures are so insanely useful, I don&#8217;t understand how anyone would want to do without them once they&#8217;ve tasted the power. Closures are the real line I draw between languages I enjoy using and those I don&#8217;t &#8212; the static vs dynamic typing thing really takes a backseat.</p>
<p>Which brings me to:</p>
<p><a href="#comment-352">Ryan</a>: WRT compiler errors, I am in fact very curious about getting my feet wet with the modern purely functional languages, such as Haskell, which are in fact <em>strongly</em> typed. You just aren&#8217;t reminded of it every step of the way. And the compiler can <a href="http://perl.plover.com/yak/typing/samples/slide027.html">find real <em>logic</em> bugs</a> (<a href="http://perl.plover.com/yak/typing/">read the talk notes</a> to understand).</p>
<p>That&#8217;s in sharp contrast with the typing in ALGOL derivatives, which seems to constantly annoy withtout ever really repaying all the labour.</p>
<p><i>(Note to self: I&#8217;ve been dropping the &#8220;I&#8217;m curious&#8221; line without doing anything about it for way too long now.)</i></p>
<p>I suppose both my lovesong for closures as well as my type inference tendencies put me firmly on one particular side of the <a href="http://osteele.com/archives/2004/11/ides">IDE divide</a>&#8230; see also <a href="http://lambda-the-ultimate.org/node/view/395">the L-t-U discussion about it</a>.</p>
<p>In retrospect, I have to wonder how this discussion went for so long before I remembered that link. It seems to summarise most of what the language debate comes down to.</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.358 seconds -->
<!-- Cached page served by WP-Cache -->
