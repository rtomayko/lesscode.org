<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments on: History Repeats Itself</title>
	<link>http://lesscode.org/2005/08/22/history-repeats-itself/</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 09:12:42 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>by: Stefan Arentz</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-306</link>
		<pubDate>Sat, 27 Aug 2005 16:14:25 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-306</guid>
					<description>&lt;p&gt;Hm stupid markup :-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sateh.com/blog/2005/08/ror_tunnel_vision.php&quot; rel=&quot;nofollow&quot;&gt;http://www.sateh.com/blog/2005/08/ror_tunnel_vision.php&lt;/a&gt;&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Hm stupid markup :-)</p>
<p><a href="http://www.sateh.com/blog/2005/08/ror_tunnel_vision.php">http://www.sateh.com/blog/2005/08/ror_tunnel_vision.php</a></p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Stefan Arentz</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-305</link>
		<pubDate>Sat, 27 Aug 2005 16:13:14 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-305</guid>
					<description>&lt;p&gt;Here is my response ... http://www.sateh.com/blog/2005/08/ror&lt;em&gt;tunnel&lt;/em&gt;vision.php&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Here is my response &#8230; http://www.sateh.com/blog/2005/08/ror<em>tunnel</em>vision.php</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: alexbunardzic</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-300</link>
		<pubDate>Fri, 26 Aug 2005 16:42:54 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-300</guid>
					<description>&lt;p&gt;The Badger writes:&lt;/p&gt;

&lt;p&gt;&quot;That’s not how I experienced things. Rewind to 1997 - back then, my colleagues and I were under massive pressure to use Java, thanks to the promotional efforts of the likes of Oracle and Sun.&quot;&lt;/p&gt;

&lt;p&gt;That's very interesting. I was having huge pains, as a Java evangelist back in 1995-96, to get corporate IT honchos to even look for a second at Java. It wasn't until the IBM's 'burger flipping' campaign, that hit them over their heads, that they started giving in and allowed for the Java-related budgeting.&lt;/p&gt;

&lt;p&gt;&quot;I think you’re right about a disruptive correction coming to shake all this up, though. In many respects, dynamic languages have been a better choice for certain kinds of solutions for the last ten years.&quot;&lt;/p&gt;

&lt;p&gt;After what I've been through in my career, and knowing how fickle the IT industry is, I can quite easily envision IBM and other big corporate iron throwing a new batch of ads at us, in a not too distant future. Something like, 'either you make an effort to learn Ruby, or you'll be flipping burgers for a living!'&lt;/p&gt;

&lt;p&gt;God fearing regular folks tend to respond to such propaganda, as was witnessed with the unprecedented penetration of Java and .NET into the corporate fold. But these technologies, once shiny new weaponry, are now starting to be perceived as an impediment and a liability, and pretty soon something new will get introduced through the massive propaganda campaigns. If that's the case, I'd like to push Ruby on the decision makers.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>The Badger writes:</p>
<p>&#8220;That’s not how I experienced things. Rewind to 1997 - back then, my colleagues and I were under massive pressure to use Java, thanks to the promotional efforts of the likes of Oracle and Sun.&#8221;</p>
<p>That&#8217;s very interesting. I was having huge pains, as a Java evangelist back in 1995-96, to get corporate IT honchos to even look for a second at Java. It wasn&#8217;t until the IBM&#8217;s &#8216;burger flipping&#8217; campaign, that hit them over their heads, that they started giving in and allowed for the Java-related budgeting.</p>
<p>&#8220;I think you’re right about a disruptive correction coming to shake all this up, though. In many respects, dynamic languages have been a better choice for certain kinds of solutions for the last ten years.&#8221;</p>
<p>After what I&#8217;ve been through in my career, and knowing how fickle the IT industry is, I can quite easily envision IBM and other big corporate iron throwing a new batch of ads at us, in a not too distant future. Something like, &#8216;either you make an effort to learn Ruby, or you&#8217;ll be flipping burgers for a living!&#8217;</p>
<p>God fearing regular folks tend to respond to such propaganda, as was witnessed with the unprecedented penetration of Java and .NET into the corporate fold. But these technologies, once shiny new weaponry, are now starting to be perceived as an impediment and a liability, and pretty soon something new will get introduced through the massive propaganda campaigns. If that&#8217;s the case, I&#8217;d like to push Ruby on the decision makers.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: The Badger</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-298</link>
		<pubDate>Fri, 26 Aug 2005 14:14:42 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-298</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;Don’t forget that Java was once in exact same position as Ruby
  is today. Serious, entrenched corporate people scoffed at
  Java.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's not how I experienced things. Rewind to 1997 - back then, my colleagues and I were under &lt;em&gt;massive&lt;/em&gt; pressure to use Java, thanks to the promotional efforts of the likes of Oracle and Sun. Not long afterwards it was &quot;Java in the database&quot; from all the major database system vendors (who are arguably the most corporate of any kind of vendor, too).&lt;/p&gt;

&lt;p&gt;Sure, I've worked relatively recently on a large server-side project written in C++, and the kind of entrenched corporate people who would choose C++ over Java for that kind of project now are quite different from those back in 1997: arguably much more unhinged. The crucial difference between then and now is that back then you could propose a dynamic language in preference to Java; now, you're frozen out if you don't choose Java or C#, and this may also have as much to do with the maturity of the solutions for Java (with a familiarity effect rubbing off on C#) as the corporate whitewashing that makes Java and C# &quot;safe&quot; choices.&lt;/p&gt;

&lt;p&gt;I think you're right about a disruptive correction coming to shake all this up, though. In many respects, dynamic languages have been a better choice for certain kinds of solutions for the last ten years.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>Don’t forget that Java was once in exact same position as Ruby<br />
  is today. Serious, entrenched corporate people scoffed at<br />
  Java.</p>
</blockquote>
<p>That&#8217;s not how I experienced things. Rewind to 1997 - back then, my colleagues and I were under <em>massive</em> pressure to use Java, thanks to the promotional efforts of the likes of Oracle and Sun. Not long afterwards it was &#8220;Java in the database&#8221; from all the major database system vendors (who are arguably the most corporate of any kind of vendor, too).</p>
<p>Sure, I&#8217;ve worked relatively recently on a large server-side project written in C++, and the kind of entrenched corporate people who would choose C++ over Java for that kind of project now are quite different from those back in 1997: arguably much more unhinged. The crucial difference between then and now is that back then you could propose a dynamic language in preference to Java; now, you&#8217;re frozen out if you don&#8217;t choose Java or C#, and this may also have as much to do with the maturity of the solutions for Java (with a familiarity effect rubbing off on C#) as the corporate whitewashing that makes Java and C# &#8220;safe&#8221; choices.</p>
<p>I think you&#8217;re right about a disruptive correction coming to shake all this up, though. In many respects, dynamic languages have been a better choice for certain kinds of solutions for the last ten years.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: alexbunardzic</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-283</link>
		<pubDate>Thu, 25 Aug 2005 17:46:20 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-283</guid>
					<description>&lt;p&gt;Rafe wrote:&lt;/p&gt;

&lt;p&gt;&quot;Plenty of people are using Java in a meaningful, feasible fashion, including me. So this is a straw man, you make up an impression of Java that doesn’t really exist so you can explain why it doesn’t work.&quot;&lt;/p&gt;

&lt;p&gt;As most things in the business world, the IT-related things boil down to cost. Why did corporations agree to abandon their huge investment in mainframes and switch to client/server? One word --cost. Real or perceived, the cost savings is always the biggest driving force behind all such decisions.&lt;/p&gt;

&lt;p&gt;Fifteen years ago, with mainframes running the corporate business operations, the cost of doing the maintenance and upkeep reached exorbitant, almost astronomical proportions. This generated huge headache for many corporations. Not only that, but also presented a serious barrier to entry for many smaller businesses who wanted to join in and ride the IT wave.&lt;/p&gt;

&lt;p&gt;The only way to increase competitive edge was to adopt a more affordable technological solution. Java came along and offered more agile, smaller footprint solution that was capable of leveraging the existing infrastructure while embracing the emerging one. The only barrier to entry at that point was the lack of available Java skills in the workforce.&lt;/p&gt;

&lt;p&gt;Fast forward to 2005. Java environment mushroomed beyond anyone's wildest dreams. Today, we see framework upon framework being hoisted upon the core Java platform, and the amount of expertise required to cope with that level of complexity is simply insane.&lt;/p&gt;

&lt;p&gt;This is why right now corporations are slowly starting to wake up and realize that the cost of doing IT the traditional, Java way, is unsustainable. Compare that to the fraction of a price required to do the same type of maintenance using the next generation tools, such as Ruby and all the domain-specific languages that are so easy to create using Ruby's built-in meta-programming facilities.&lt;/p&gt;

&lt;p&gt;Folks, at this point it's a no-contest. We may like it or not like it, but, like COBOL programmers in the early '90s, we'll be swept by the change dictated by lowering the cost of doing IT maintenance.&lt;/p&gt;

&lt;p&gt;I can't see how can there be more than one way about it.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Rafe wrote:</p>
<p>&#8220;Plenty of people are using Java in a meaningful, feasible fashion, including me. So this is a straw man, you make up an impression of Java that doesn’t really exist so you can explain why it doesn’t work.&#8221;</p>
<p>As most things in the business world, the IT-related things boil down to cost. Why did corporations agree to abandon their huge investment in mainframes and switch to client/server? One word &#8211;cost. Real or perceived, the cost savings is always the biggest driving force behind all such decisions.</p>
<p>Fifteen years ago, with mainframes running the corporate business operations, the cost of doing the maintenance and upkeep reached exorbitant, almost astronomical proportions. This generated huge headache for many corporations. Not only that, but also presented a serious barrier to entry for many smaller businesses who wanted to join in and ride the IT wave.</p>
<p>The only way to increase competitive edge was to adopt a more affordable technological solution. Java came along and offered more agile, smaller footprint solution that was capable of leveraging the existing infrastructure while embracing the emerging one. The only barrier to entry at that point was the lack of available Java skills in the workforce.</p>
<p>Fast forward to 2005. Java environment mushroomed beyond anyone&#8217;s wildest dreams. Today, we see framework upon framework being hoisted upon the core Java platform, and the amount of expertise required to cope with that level of complexity is simply insane.</p>
<p>This is why right now corporations are slowly starting to wake up and realize that the cost of doing IT the traditional, Java way, is unsustainable. Compare that to the fraction of a price required to do the same type of maintenance using the next generation tools, such as Ruby and all the domain-specific languages that are so easy to create using Ruby&#8217;s built-in meta-programming facilities.</p>
<p>Folks, at this point it&#8217;s a no-contest. We may like it or not like it, but, like COBOL programmers in the early &#8217;90s, we&#8217;ll be swept by the change dictated by lowering the cost of doing IT maintenance.</p>
<p>I can&#8217;t see how can there be more than one way about it.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: alexbunardzic</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-282</link>
		<pubDate>Thu, 25 Aug 2005 17:26:44 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-282</guid>
					<description>&lt;p&gt;mark wrote:&lt;/p&gt;

&lt;p&gt;&quot;That’s a ridiculously simplistic generalization. Are you saying this is true for any application, no matter its size, scope, or purpose?&quot;&lt;/p&gt;

&lt;p&gt;Sorry, I've omitted one crucial word -- 'typical'.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>mark wrote:</p>
<p>&#8220;That’s a ridiculously simplistic generalization. Are you saying this is true for any application, no matter its size, scope, or purpose?&#8221;</p>
<p>Sorry, I&#8217;ve omitted one crucial word &#8212; &#8216;typical&#8217;.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: alexbunardzic</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-281</link>
		<pubDate>Thu, 25 Aug 2005 17:24:52 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-281</guid>
					<description>&lt;p&gt;thirdshift wrote:&lt;/p&gt;

&lt;p&gt;&quot;If any bit of what you are trying to do with this post is to persuade Java developers to consider Ruby and/or Rails then you are failing.&quot;&lt;/p&gt;

&lt;p&gt;I'm not trying to persuade anyone. I was merely relating the article that was originally posted by a very renowned author who has a proven track record of influencing the direction corporate technology is taking (Jason Hunter). I happen to agree with him, which does not automatically mean that I'm trying to proselytize.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>thirdshift wrote:</p>
<p>&#8220;If any bit of what you are trying to do with this post is to persuade Java developers to consider Ruby and/or Rails then you are failing.&#8221;</p>
<p>I&#8217;m not trying to persuade anyone. I was merely relating the article that was originally posted by a very renowned author who has a proven track record of influencing the direction corporate technology is taking (Jason Hunter). I happen to agree with him, which does not automatically mean that I&#8217;m trying to proselytize.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: alexbunardzic</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-280</link>
		<pubDate>Thu, 25 Aug 2005 17:18:45 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-280</guid>
					<description>&lt;p&gt;The Badger writes:&lt;/p&gt;

&lt;p&gt;&quot;There’s no need to be patronising:&quot;&lt;/p&gt;

&lt;p&gt;Sorry if I came across as patronizing; I just wasn't sure if you've been there to witness the rise of Java in the late '90s. It is obvious now that you're actually a Java veteran:-)&lt;/p&gt;

&lt;p&gt;&quot;By rubbing the hype in to their already overstated achievements, the Rails people are already on the track well trodden by Sun Microsystems ten years ago. The difference is that Sun bankrolled Java with a lot of loose dot-com cash, white papers and “high corporate” promotion, whose practitioners were never expected to project credibility, whereas in the supposedly developer-centred Rails hype chorus the louder you sing shows how far you still have to go before you really get it.&quot;&lt;/p&gt;

&lt;p&gt;It's kind of funny, but if memory serves me, I don't think that Java's smashing popularity rode on the dot-com wave. If anything, the corporations that adopted Java and made it really big used to be extremely dot-com shy. Remeber those IBM TV ads from 6 years ago with the pierced, tatooed dot-com high tech kids being portrayed as every corporate henchman's worst nightmare? That horrid image was then used to highlight the seriousness and non-hacker culture of Java as the only feasible corporate IT solution.&lt;/p&gt;

&lt;p&gt;Don't forget that Java was once in exact same position as Ruby is today. Serious, entrenched corporate people scoffed at Java. IBM had to use pretty nasty, low-blow marketing tactics to scare developers into switching to Java from COBOL and RPG. I recall vividly the 'burger flipping' ads in IBM-related magazines, where they bluntly asked the developers what would they rather do: make an effort to learn Java, or switch to flipping burgers? The message was loud and clear -- adopt or die!&lt;/p&gt;

&lt;p&gt;Ruby (and Rails) community is nowhere near that desperate and that aggressive (nor that condescending). All we are saying is give lesscode a chance!&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>The Badger writes:</p>
<p>&#8220;There’s no need to be patronising:&#8221;</p>
<p>Sorry if I came across as patronizing; I just wasn&#8217;t sure if you&#8217;ve been there to witness the rise of Java in the late &#8217;90s. It is obvious now that you&#8217;re actually a Java veteran:-)</p>
<p>&#8220;By rubbing the hype in to their already overstated achievements, the Rails people are already on the track well trodden by Sun Microsystems ten years ago. The difference is that Sun bankrolled Java with a lot of loose dot-com cash, white papers and “high corporate” promotion, whose practitioners were never expected to project credibility, whereas in the supposedly developer-centred Rails hype chorus the louder you sing shows how far you still have to go before you really get it.&#8221;</p>
<p>It&#8217;s kind of funny, but if memory serves me, I don&#8217;t think that Java&#8217;s smashing popularity rode on the dot-com wave. If anything, the corporations that adopted Java and made it really big used to be extremely dot-com shy. Remeber those IBM TV ads from 6 years ago with the pierced, tatooed dot-com high tech kids being portrayed as every corporate henchman&#8217;s worst nightmare? That horrid image was then used to highlight the seriousness and non-hacker culture of Java as the only feasible corporate IT solution.</p>
<p>Don&#8217;t forget that Java was once in exact same position as Ruby is today. Serious, entrenched corporate people scoffed at Java. IBM had to use pretty nasty, low-blow marketing tactics to scare developers into switching to Java from COBOL and RPG. I recall vividly the &#8216;burger flipping&#8217; ads in IBM-related magazines, where they bluntly asked the developers what would they rather do: make an effort to learn Java, or switch to flipping burgers? The message was loud and clear &#8212; adopt or die!</p>
<p>Ruby (and Rails) community is nowhere near that desperate and that aggressive (nor that condescending). All we are saying is give lesscode a chance!</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: The Badger</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-274</link>
		<pubDate>Thu, 25 Aug 2005 00:43:56 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-274</guid>
					<description>&lt;blockquote&gt;
  &lt;p&gt;There are currently some 4.5 million Java developers worldwide. Maybe
  you’ve just joined the IT workforce, so you may not know much about
  the IT history, but not that long ago Sun and the budding Java
  community were celebrating the hundred thousandth download of JSDK.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's no need to be patronising: I've been using Java since 1995, and it has been the technology (rather than something nicer, unfortunately) which has got me hired and thus paid. On the stats front, there have apparently been N million downloads of Solaris, but I doubt that the majority of that particular &quot;shiny new free stuff&quot; crowd ever even installed it. Still, that's the kind of audience you're talking about, I suppose.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Up until recently, it was all Java and J2EE. Jason Hunter was one of
  the most prominent gurus who popularized the open source frameworks
  back in 2000 (such as Webmacro, Velocity, etc.) He helped bring those
  beasts into the corporate fold.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, let's look at a cross-section of the safe J2EE corporate choices: the Apache stuff. I've dealt with quite a bit of it, and whilst people seem to portray it all as cutting edge stuff, with everyone having fun developing it in a corporate sort of way, if you look at the code base on apache.org it seems to be in a forever-expanding bloat phase like a dying star waiting for a supernova.&lt;/p&gt;

&lt;p&gt;I'm sure Jason Hunter is well-known in various scenes, but I've never heard of him through my corporate experiences, which admittedly says something about the corporate environments I've been in. But then I really wonder whether corporate environments engender that atmosphere of passionate learning which would familiarise employees to Mr Hunter's endeavours and make them appreciate everything he has to say (as opposed to what Sun/IBM/Oracle/Microsoft have to say). And I also wonder about how great some of the Java scene gurus are with their 10000 class solutions to relatively modest problems. Not that I tar Mr Hunter with that particular brush, but I do doubt the top honours piled on various Rails advocates.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Today, he’s advocating that we abandon them and look into something
  like RoR instead. And guess what — there is a big chance that the
  crowds will listen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'd argue that the people who would really appreciate dynamic languages and environments aren't listening: they're well ahead of Mr Hunter; they're using them already! Everyone else is just waiting for a shrink-wrapped package and a certification programme foisted upon them by their bosses.&lt;/p&gt;

&lt;p&gt;I don't doubt that Java is a sitting duck - it's like a bad film (movie) concept that the nephew of the studio boss has been pitching to executives for the best part of the afternoon, enjoying an indecent amount of attention that worthier projects are never likely to see. That one &quot;needs&quot; Eclipse plus additions (plus big iron) just to make anything more sophisticated than &quot;hello Web&quot; bearable to the cube jockeys is a pretty firm indication that some kind of re-adjustment will arrive to partially replace it. What's happened so far is that C#/.NET has been the replacement in many corporate scenes: it's similar enough to be &quot;safe&quot; whilst having the &quot;shiny new&quot; factor - the best of both corporate worlds!&lt;/p&gt;

&lt;p&gt;In my view, Rails only deserves respect for making some kinds of applications easier - a not unsurprising facet of a dynamic language framework - but even then there are technical aspects of that project which make me (and presumably many others) cringe, and not in a leather and latex &quot;more discipline required&quot; J2EE way, either. By rubbing the hype in to their already overstated achievements, the Rails people are already on the track well trodden by Sun Microsystems ten years ago. The difference is that Sun bankrolled Java with a lot of loose dot-com cash, white papers and &quot;high corporate&quot; promotion, whose practitioners were never expected to project credibility, whereas in the supposedly developer-centred Rails hype chorus the louder you sing shows how far you still have to go before you really get it.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<blockquote>
<p>There are currently some 4.5 million Java developers worldwide. Maybe<br />
  you’ve just joined the IT workforce, so you may not know much about<br />
  the IT history, but not that long ago Sun and the budding Java<br />
  community were celebrating the hundred thousandth download of JSDK.</p>
</blockquote>
<p>There&#8217;s no need to be patronising: I&#8217;ve been using Java since 1995, and it has been the technology (rather than something nicer, unfortunately) which has got me hired and thus paid. On the stats front, there have apparently been N million downloads of Solaris, but I doubt that the majority of that particular &#8220;shiny new free stuff&#8221; crowd ever even installed it. Still, that&#8217;s the kind of audience you&#8217;re talking about, I suppose.</p>
<blockquote>
<p>Up until recently, it was all Java and J2EE. Jason Hunter was one of<br />
  the most prominent gurus who popularized the open source frameworks<br />
  back in 2000 (such as Webmacro, Velocity, etc.) He helped bring those<br />
  beasts into the corporate fold.</p>
</blockquote>
<p>Yes, let&#8217;s look at a cross-section of the safe J2EE corporate choices: the Apache stuff. I&#8217;ve dealt with quite a bit of it, and whilst people seem to portray it all as cutting edge stuff, with everyone having fun developing it in a corporate sort of way, if you look at the code base on apache.org it seems to be in a forever-expanding bloat phase like a dying star waiting for a supernova.</p>
<p>I&#8217;m sure Jason Hunter is well-known in various scenes, but I&#8217;ve never heard of him through my corporate experiences, which admittedly says something about the corporate environments I&#8217;ve been in. But then I really wonder whether corporate environments engender that atmosphere of passionate learning which would familiarise employees to Mr Hunter&#8217;s endeavours and make them appreciate everything he has to say (as opposed to what Sun/IBM/Oracle/Microsoft have to say). And I also wonder about how great some of the Java scene gurus are with their 10000 class solutions to relatively modest problems. Not that I tar Mr Hunter with that particular brush, but I do doubt the top honours piled on various Rails advocates.</p>
<blockquote>
<p>Today, he’s advocating that we abandon them and look into something<br />
  like RoR instead. And guess what — there is a big chance that the<br />
  crowds will listen.</p>
</blockquote>
<p>I&#8217;d argue that the people who would really appreciate dynamic languages and environments aren&#8217;t listening: they&#8217;re well ahead of Mr Hunter; they&#8217;re using them already! Everyone else is just waiting for a shrink-wrapped package and a certification programme foisted upon them by their bosses.</p>
<p>I don&#8217;t doubt that Java is a sitting duck - it&#8217;s like a bad film (movie) concept that the nephew of the studio boss has been pitching to executives for the best part of the afternoon, enjoying an indecent amount of attention that worthier projects are never likely to see. That one &#8220;needs&#8221; Eclipse plus additions (plus big iron) just to make anything more sophisticated than &#8220;hello Web&#8221; bearable to the cube jockeys is a pretty firm indication that some kind of re-adjustment will arrive to partially replace it. What&#8217;s happened so far is that C#/.NET has been the replacement in many corporate scenes: it&#8217;s similar enough to be &#8220;safe&#8221; whilst having the &#8220;shiny new&#8221; factor - the best of both corporate worlds!</p>
<p>In my view, Rails only deserves respect for making some kinds of applications easier - a not unsurprising facet of a dynamic language framework - but even then there are technical aspects of that project which make me (and presumably many others) cringe, and not in a leather and latex &#8220;more discipline required&#8221; J2EE way, either. By rubbing the hype in to their already overstated achievements, the Rails people are already on the track well trodden by Sun Microsystems ten years ago. The difference is that Sun bankrolled Java with a lot of loose dot-com cash, white papers and &#8220;high corporate&#8221; promotion, whose practitioners were never expected to project credibility, whereas in the supposedly developer-centred Rails hype chorus the louder you sing shows how far you still have to go before you really get it.</p>
]]></content:encoded>
				</item>
	<item>
		<title>by: Viamentis Technologies</title>
		<link>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-273</link>
		<pubDate>Wed, 24 Aug 2005 13:05:20 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/22/history-repeats-itself/#comment-273</guid>
					<description>&lt;p&gt;&lt;strong&gt;Java: Sitting duck?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The popularity of Rails is making many people sit up and take notice about what RoR is doing right. One of Java web development heavyweights, Jason Hunter, wrote a very interesting article on how RoR is poised to eat into Java developer mindshare. And the&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p><strong>Java: Sitting duck?</strong></p>
<p>The popularity of Rails is making many people sit up and take notice about what RoR is doing right. One of Java web development heavyweights, Jason Hunter, wrote a very interesting article on how RoR is poised to eat into Java developer mindshare. And the</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.393 seconds -->
<!-- Cached page served by WP-Cache -->
