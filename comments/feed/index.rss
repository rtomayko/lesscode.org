<?xml version="1.0" encoding="UTF-8"?><!-- generator="wordpress/2.0.1" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
	<title>Comments for lesscode.org</title>
	<link>http://lesscode.org</link>
	<description>AAaaaaahhhhrrrrrrr!</description>
	<pubDate>Mon, 17 Sep 2007 09:52:03 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.1</generator>

	<item>
		<title>Comment on Control-Space by Anonymous</title>
		<link>http://lesscode.org/2005/08/29/control-space/#comment-50839</link>
		<pubDate>Wed, 04 Jul 2007 03:39:38 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/29/control-space/#comment-50839</guid>
					<description>&lt;p&gt;I think there is no issue with option of using ctrl space in fact it reduces lot of coding time by thinking or refering the docs.If you feel like you are unable to remember the code because of this , you have to find other way of remembering it.&lt;/p&gt;

&lt;p&gt;“ITS LIKE BLAMING THE VEHICLE FOR YOU ARE NOT READY TO WALK TO REACH THERE”&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I think there is no issue with option of using ctrl space in fact it reduces lot of coding time by thinking or refering the docs.If you feel like you are unable to remember the code because of this , you have to find other way of remembering it.</p>
<p>“ITS LIKE BLAMING THE VEHICLE FOR YOU ARE NOT READY TO WALK TO REACH THERE”</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on Design Patterns as a statement of failure by Pianelli</title>
		<link>http://lesscode.org/2006/10/01/design-patterns-as-a-statement-of-failure/#comment-37879</link>
		<pubDate>Thu, 05 Apr 2007 22:03:10 +0000</pubDate>
		<guid>http://lesscode.org/2006/10/01/design-patterns-as-a-statement-of-failure/#comment-37879</guid>
					<description>&lt;p&gt;I´m using Design Patterns in all on my projects written in PHP5. And I think you get your code more flexible than without design patterns.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>I´m using Design Patterns in all on my projects written in PHP5. And I think you get your code more flexible than without design patterns.</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on about lesscode.org by James Governor&#8217;s Monkchips &#187; On Software Requirements: Just say No&#8230; agile is simple</title>
		<link>http://lesscode.org/about/#comment-24035</link>
		<pubDate>Fri, 26 Jan 2007 11:57:33 +0000</pubDate>
		<guid>http://lesscode.org/about/#comment-24035</guid>
					<description>&lt;p&gt;[...] You see, lesscode isn&amp;#8217;t just a function of the language you choose to develop in, ie less code to get more work done,  but also how many features you choose to implement in the first place. This is perhaps the key problem with so much Waterfall development- it ends up including every feature that might be needed, rather than focusing on what needs to be done to solve a specific part of a problem at hand. With Agile, on the other hand, features are built with some isolation. Agile development can potentially say no more easily, because there are fewer interdependencies between all the features as specced. Perhaps we should add this sniff test to the smell of agile - you can tell an organisation is agile when development teams can reject feature requests. [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] You see, lesscode isn&#8217;t just a function of the language you choose to develop in, ie less code to get more work done,  but also how many features you choose to implement in the first place. This is perhaps the key problem with so much Waterfall development- it ends up including every feature that might be needed, rather than focusing on what needs to be done to solve a specific part of a problem at hand. With Agile, on the other hand, features are built with some isolation. Agile development can potentially say no more easily, because there are fewer interdependencies between all the features as specced. Perhaps we should add this sniff test to the smell of agile - you can tell an organisation is agile when development teams can reject feature requests. [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on about lesscode.org by James Governor&#8217;s Monkchips &#187; Don Ferguson Joins Microsoft. 5 things you didn&#8217;t know</title>
		<link>http://lesscode.org/about/#comment-23144</link>
		<pubDate>Tue, 16 Jan 2007 16:47:18 +0000</pubDate>
		<guid>http://lesscode.org/about/#comment-23144</guid>
					<description>&lt;p&gt;[...] Don was a seriously heavy hitter at IBM. He has taken lumps from people in the past, including me, but some of those barbs were undoubtedly unfair. After all when you&amp;#8217;re at the very apex of the IBM Software Group tree its kind of hard to take a hardcore lesscode approach. [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] Don was a seriously heavy hitter at IBM. He has taken lumps from people in the past, including me, but some of those barbs were undoubtedly unfair. After all when you&#8217;re at the very apex of the IBM Software Group tree its kind of hard to take a hardcore lesscode approach. [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on Unnecessary Until Proven Required by Motherhood and Apple Pie</title>
		<link>http://lesscode.org/2005/07/10/unnecessary-until-proven-required/#comment-22815</link>
		<pubDate>Fri, 12 Jan 2007 02:31:57 +0000</pubDate>
		<guid>http://lesscode.org/2005/07/10/unnecessary-until-proven-required/#comment-22815</guid>
					<description>&lt;p&gt;[...] So I would like to impress upon you that the languages that dominate the web are not the way they are because we lack the ability to build more complex, sophisticated, flashy tools and languages, they are that way because we assume extra complexity is unnecessary until proven required and we see very little evidence to support the inclusion of the complexities that have been introduced into &amp;#8220;enterprise class&amp;#8221; software over the past decade. [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] So I would like to impress upon you that the languages that dominate the web are not the way they are because we lack the ability to build more complex, sophisticated, flashy tools and languages, they are that way because we assume extra complexity is unnecessary until proven required and we see very little evidence to support the inclusion of the complexities that have been introduced into &#8220;enterprise class&#8221; software over the past decade. [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on REST wins, noone goes home by S. Potter</title>
		<link>http://lesscode.org/2006/03/19/rest-wins-noone-goes-home/#comment-22184</link>
		<pubDate>Sat, 06 Jan 2007 00:18:46 +0000</pubDate>
		<guid>http://lesscode.org/2006/03/19/rest-wins-noone-goes-home/#comment-22184</guid>
					<description>&lt;p&gt;As a former Java head turned Ruby evangelist I have to promote Ruby on Rails' latest offering of &lt;em&gt;ActiveResource&lt;/em&gt;, which is a forth coming component of the &lt;em&gt;Ruby on Rails&lt;/em&gt; stack.  The production version of Rails (1.1) already has ReSTian support for API and web producers.  However, ActiveResource will take ReSTian support one step further for REST consumers in addition to producers when the stable version is released shortly under Rails 1.2.  A Ruby on Rails plugin already exists for ReSTful authentication based on HTTP Basic (authentication under REST is very unfortunate, but the plugin author isn't to blame for the history of HTTP Authentication).&lt;/p&gt;

&lt;p&gt;I hope to add a blog entry later this weekend on my experiences with ReSTian Rails at &lt;a href=&quot;http://snakesgemscoffee.blogspot.com&quot; title=&quot;Ruby, Ruby on Rails vs. Java agile open source programming blog&quot; rel=&quot;&quot;&gt;&lt;strong&gt;Snakes, Gems &amp;#38; Coffee&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>As a former Java head turned Ruby evangelist I have to promote Ruby on Rails&#8217; latest offering of <em>ActiveResource</em>, which is a forth coming component of the <em>Ruby on Rails</em> stack.  The production version of Rails (1.1) already has ReSTian support for API and web producers.  However, ActiveResource will take ReSTian support one step further for REST consumers in addition to producers when the stable version is released shortly under Rails 1.2.  A Ruby on Rails plugin already exists for ReSTful authentication based on HTTP Basic (authentication under REST is very unfortunate, but the plugin author isn&#8217;t to blame for the history of HTTP Authentication).</p>
<p>I hope to add a blog entry later this weekend on my experiences with ReSTian Rails at <a href="http://snakesgemscoffee.blogspot.com" title="Ruby, Ruby on Rails vs. Java agile open source programming blog" rel=""><strong>Snakes, Gems &amp; Coffee</strong></a>.</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on Disposable Software by Seezar Honibe</title>
		<link>http://lesscode.org/2005/08/16/disposable-software/#comment-20839</link>
		<pubDate>Tue, 19 Dec 2006 14:24:16 +0000</pubDate>
		<guid>http://lesscode.org/2005/08/16/disposable-software/#comment-20839</guid>
					<description>&lt;p&gt;Lets see if I got this right: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Less is more
Seems we all agree reuse is fiction. Reuse bloats the code and increases the chance for implementation and production errors. Don't solve for an undefined problem - you cannot. 
Presentation correlation: If the business presentation were to address a different issue than for what it was created the presentation would confuse the audience. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consumers create
As defined disposable software requires domain expertise. Focus on the problem to solve than being a tools expert. Most hardware products are all disposable and in some cases the factory that creates the specific hardware is also disposable. Here lies the rub; most consumers of the 'software' are still not able to create their own applicatons.
Presentation correlation: If I as the presenter need to deliver a board meeting, I would create my own presentation; not my assistant; not the IT guy. In fact what I lack in bling is made up for in focused content. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Half-life matters ( http://en.wikipedia.org/wiki/Halflife )
Knowing how long your application lasts determines how much effort you invest and I submit this defines disposability. Know that production support, network performance and interoperability  as is lifetime usage are part of the specific requirements. But don't code for more than you know. 
Presentation correlation: My presentations, created with PowerPoint, have a halflife of 7 days after which the information is out of date; the problem has been solved. However Microsoft PowerPoint is not at the same level of disposability as the presentation created with PP. That means software (C#) does not create disposability but specific application factories (PowerPoint) create disposable products (mypresentation.ppt). &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;did we not try and get here with 4GLs ;-)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One size does not fit all
What is being said about disposable applications is solve a specific problem and not all applications are solved in the sameway. The lifetime of the application may require different tools and different approaches. Ruby on Rails solves a specific class of problem and that is what makes RoR such a  powerful factory. (DSL's extend this metaphor) 
Presentation correlation: At some point I have to put aside PowerPoint and decided that a short video clip (also disposable) is the better presentation to get re-elected.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use common sense
In the business world we constantly make value based decisions as to effort and result. As long as you know the lifetime value of your product you can match the implementation and maintenance effort appropriately. 
Presentation correlation: This is where I say maybe a verbal conversation or a blog entry is best and I throw away Microsoft PowerPoint and get back to doing real work, like walking my dog ;-)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
		<content:encoded><![CDATA[<p>Lets see if I got this right: </p>
<ol>
<li>
<p>Less is more<br />
Seems we all agree reuse is fiction. Reuse bloats the code and increases the chance for implementation and production errors. Don&#8217;t solve for an undefined problem - you cannot.<br />
Presentation correlation: If the business presentation were to address a different issue than for what it was created the presentation would confuse the audience. </p>
</li>
<li>
<p>Consumers create<br />
As defined disposable software requires domain expertise. Focus on the problem to solve than being a tools expert. Most hardware products are all disposable and in some cases the factory that creates the specific hardware is also disposable. Here lies the rub; most consumers of the &#8217;software&#8217; are still not able to create their own applicatons.<br />
Presentation correlation: If I as the presenter need to deliver a board meeting, I would create my own presentation; not my assistant; not the IT guy. In fact what I lack in bling is made up for in focused content. </p>
</li>
<li>
<p>Half-life matters ( http://en.wikipedia.org/wiki/Halflife )<br />
Knowing how long your application lasts determines how much effort you invest and I submit this defines disposability. Know that production support, network performance and interoperability  as is lifetime usage are part of the specific requirements. But don&#8217;t code for more than you know.<br />
Presentation correlation: My presentations, created with PowerPoint, have a halflife of 7 days after which the information is out of date; the problem has been solved. However Microsoft PowerPoint is not at the same level of disposability as the presentation created with PP. That means software (C#) does not create disposability but specific application factories (PowerPoint) create disposable products (mypresentation.ppt). </p>
<ul>
<li>did we not try and get here with 4GLs ;-)</li>
</ul>
</li>
<li>
<p>One size does not fit all<br />
What is being said about disposable applications is solve a specific problem and not all applications are solved in the sameway. The lifetime of the application may require different tools and different approaches. Ruby on Rails solves a specific class of problem and that is what makes RoR such a  powerful factory. (DSL&#8217;s extend this metaphor)<br />
Presentation correlation: At some point I have to put aside PowerPoint and decided that a short video clip (also disposable) is the better presentation to get re-elected.  </p>
</li>
<li>
<p>Use common sense<br />
In the business world we constantly make value based decisions as to effort and result. As long as you know the lifetime value of your product you can match the implementation and maintenance effort appropriately.<br />
Presentation correlation: This is where I say maybe a verbal conversation or a blog entry is best and I throw away Microsoft PowerPoint and get back to doing real work, like walking my dog ;-)</p>
</li>
</ol>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on Motherhood and Apple Pie by Un peu de lecture 02 at Aurélien Pelletier&#8217;s Weblog</title>
		<link>http://lesscode.org/2005/07/21/motherhood-and-apple-pie/#comment-20737</link>
		<pubDate>Sun, 17 Dec 2006 22:50:56 +0000</pubDate>
		<guid>http://lesscode.org/2005/07/21/motherhood-and-apple-pie/#comment-20737</guid>
					<description>&lt;p&gt;[...] Motherhood and Apple Pie ou the design principles that underlie the web. [...]&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>[&#8230;] Motherhood and Apple Pie ou the design principles that underlie the web. [&#8230;]</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on REST wins, noone goes home by tndal</title>
		<link>http://lesscode.org/2006/03/19/rest-wins-noone-goes-home/#comment-20724</link>
		<pubDate>Sun, 17 Dec 2006 18:35:05 +0000</pubDate>
		<guid>http://lesscode.org/2006/03/19/rest-wins-noone-goes-home/#comment-20724</guid>
					<description>&lt;p&gt;Ben Davies asks:
&quot;Say, for example, I GET an image from a REST service. I want to rotate that image by 90 degrees and then PUT it back. The Rotating part cannot be accomidated by REST? Is that correct? Is the PUT transfering the modified Resource, or am I passing a series of actions to be performed upon that Resource? Do I GET the image, rotate the image on the client, then PUT the image back? Or do I PUT a series of transformations to be performed on that resource?&quot;&lt;/p&gt;

&lt;p&gt;You could do a GET of the image resource followed by a PUT of the updated image resource, as you describe. &lt;/p&gt;

&lt;p&gt;Or you could define a separate associated resource for the image orientation and do a GET and PUT of that orientation resource.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>Ben Davies asks:<br />
&#8220;Say, for example, I GET an image from a REST service. I want to rotate that image by 90 degrees and then PUT it back. The Rotating part cannot be accomidated by REST? Is that correct? Is the PUT transfering the modified Resource, or am I passing a series of actions to be performed upon that Resource? Do I GET the image, rotate the image on the client, then PUT the image back? Or do I PUT a series of transformations to be performed on that resource?&#8221;</p>
<p>You could do a GET of the image resource followed by a PUT of the updated image resource, as you describe. </p>
<p>Or you could define a separate associated resource for the image orientation and do a GET and PUT of that orientation resource.</p>
]]></content:encoded>
				</item>
	<item>
		<title>Comment on Simplest Possible Plugin Manager For Rails by Walker</title>
		<link>http://lesscode.org/2005/10/27/rails-simplest-plugin-manager/#comment-20307</link>
		<pubDate>Tue, 12 Dec 2006 21:07:40 +0000</pubDate>
		<guid>http://lesscode.org/2005/10/27/rails-simplest-plugin-manager/#comment-20307</guid>
					<description>&lt;p&gt;What I want to do on my blog, is every few hours take the oldest post and move it to the 
front of the queue, all automatically. Anyone know if there is a plugin that can do this or 
a simple way to set up another plugin to do this (use my own feed perhaps)?
Thanks.&lt;/p&gt;
</description>
		<content:encoded><![CDATA[<p>What I want to do on my blog, is every few hours take the oldest post and move it to the<br />
front of the queue, all automatically. Anyone know if there is a plugin that can do this or<br />
a simple way to set up another plugin to do this (use my own feed perhaps)?<br />
Thanks.</p>
]]></content:encoded>
				</item>
</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.427 seconds -->
